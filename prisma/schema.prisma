generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
  PATIENT
  DOCTOR
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?
  userRole               Role      @default(PATIENT)

  teamMembers        TeamMember[]
  accounts           Account[]
  sessions           Session[]
  invitations        Invitation[]
  patientProfile     PatientProfile?
  doctorProfile      DoctorProfile?
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[] @relation("DoctorAppointments")
  medicalRecordsAsPatient MedicalRecord[] @relation("PatientRecords")
  medicalRecordsAsDoctor  MedicalRecord[] @relation("DoctorRecords")
  educationalContent EducationalContent[]
  payments           Payment[]
}

model Team {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  defaultRole     Role         @default(MEMBER)
  billingId       String?
  billingProvider String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  members         TeamMember[]
  invitations     Invitation[]
  apiKeys         ApiKey[]

  @@index([billingId])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id             String   @id @default(uuid())
  teamId         String
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(uuid())
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(uuid())
  billingScheme String
  currency      String
  serviceId     String
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model jackson_store {
  key        String    @id(map: "_jackson_store_key") @db.VarChar(1500)
  value      String
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  modifiedAt DateTime? @db.Timestamp(6)
  namespace  String?   @db.VarChar(256)

  jackson_index jackson_index[]

  @@index([namespace], map: "_jackson_store_namespace")
  @@ignore
}

model jackson_index {
  id       Int    @id(map: "_jackson_index_id") @default(autoincrement())
  key      String @db.VarChar(1500)
  storeKey String @db.VarChar(1500)

  store jackson_store @relation(fields: [storeKey], references: [key], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
  @@ignore
}

model jackson_ttl {
  key       String @id(map: "jackson_ttl_key") @db.VarChar(1500)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
  @@ignore
}

enum AppointmentStatus {
  BOOKED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum AppointmentType {
  IN_PERSON
  TELEHEALTH
}

model PatientProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique
  dateOfBirth           DateTime?
  phone                 String?
  address               String?
  medicalHistory        Json?    @db.JsonB
  allergies             String[] @default([])
  currentMedications    String[] @default([])
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelation String?
  bloodType             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DoctorProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  specialty           String
  qualifications      String[] @default([])
  licenseNumber       String?
  availabilitySchedule Json?   @db.JsonB
  bio                 String?  @db.Text
  yearsOfExperience   Int?
  consultationFee     Float?
  education           String[] @default([])
  languages           String[] @default([])
  isAcceptingPatients Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([specialty])
}

model Appointment {
  id                String            @id @default(uuid())
  patientId         String
  doctorId          String
  date              DateTime
  duration          Int               @default(30) // in minutes
  type              AppointmentType   @default(IN_PERSON)
  status            AppointmentStatus @default(BOOKED)
  notes             String?           @db.Text
  reason            String?
  symptoms          String?           @db.Text
  telehealth_link   String?
  reminderSent      Boolean           @default(false)
  cancellationReason String?         @db.Text
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())

  patient User @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([doctorId])
  @@index([date])
  @@index([status])
}

model MedicalRecord {
  id              String   @id @default(uuid())
  patientId       String
  doctorId        String
  appointmentId   String?
  visitDate       DateTime
  chiefComplaint  String?
  diagnoses       Json     @db.JsonB
  treatmentPlans  Json     @db.JsonB
  prescriptions   Json     @db.JsonB
  labResults      Json?    @db.JsonB
  vitals          Json?    @db.JsonB
  visitNotes      String   @db.Text
  followUpDate    DateTime?
  attachments     String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  patient User @relation("PatientRecords", fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User @relation("DoctorRecords", fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([doctorId])
  @@index([visitDate])
}

model EducationalContent {
  id              String   @id @default(uuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  summary         String?
  authorId        String
  categories      String[] @default([])
  tags            String[] @default([])
  featuredImage   String?
  published       Boolean  @default(false)
  publishedAt     DateTime?
  readingTime     Int?     // in minutes
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([published])
  @@index([categories])
}

model Payment {
  id              String   @id @default(uuid())
  userId          String
  appointmentId   String?
  subscriptionId  String?
  amount          Float
  currency        String   @default("usd")
  status          String   // pending, completed, failed, refunded
  stripeChargeId  String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([appointmentId])
}
